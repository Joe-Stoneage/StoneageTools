
// Reference: https://www.unitconverters.net/

namespace StoneageTools.Units
{
    public static class StoneageToolsUnits
    {
        #region pressure
        public static double PSI_2_Pa(double inVal)     => inVal * 6894.7572932;            // Pascal
        public static double PSI_2_APa(double inVal)    => inVal * 6.8947572938895E+21;     // attopascals
        public static double PSI_2_KGF(double inVal)    => inVal * 0.45359350099669;        // kilogram force
        public static double PSI_2_ATM(double inVal)    => inVal * 0.06804596391019;        // atmosphere
        public static double PSI_2_AT(double inVal)     => inVal * 0.070306957964239;       // atmosphere techical
        public static double PSI_2_mmHg(double inVal)   => inVal * 51.715075480416;         // millimeter of mercury
        public static double PSI_2_BAR(double inVal)    => inVal * 0.068947572932;          // bars
        public static double PSI_2_TORR(double inVal)   => inVal * 51.714932572153;         // torrs
        public static double PSI_2_ksi(double inVal)    => inVal * 0.001;                   // ksi
        public static double Kgf_2_BAR(double inVal)    => inVal / 1.0197;
        public static double BAR_2_Pa(double inVal)     => inVal * 1000;
        public static double BAR_2_KPa(double inVal)    => inVal * 100;
        public static double BAR_2_ATM(double inVal)    => inVal / 1.01325;
        public static double KPa_2_BAR(double inVal)    => inVal / 100;
        #endregion

        #region length
        public static double Mile_2_Kilometer(double inVal)     => inVal * 1.609344;
        public static double Kilometer_2_Mile(double inVal)     => inVal / 1.609344;
        public static double MegaParsec_2_Meter(double inVal)   => inVal * 3.08567758128E+22;
        public static double Meter_2_MegaParsec(double inVal)   => inVal / 3.08567758128E+22;
        public static double KiloParsec_2_Meter(double inVal)   => inVal * 3.08567758128E+19;
        public static double Meter_2_KiloParsec(double inVal)   => inVal / 3.08567758128E+19;
        public static double Parsec_2_Meter(double inVal)       => inVal * 3.08567758128E+16;
        public static double Meter_2_Parsec(double inVal)       => inVal / 3.08567758128E+16;
        public static double Lightyear_2_Meter(double inVal)    => inVal * 9.46073047258E+15;
        public static double Meter_2_Lightyear(double inVal)    => inVal / 9.46073047258E+15;
        public static double AstronomicalUnit_2_Meter(double inVal) => inVal * 149597870691;
        public static double Meter_2_AstronomicalUnit(double inVal) => inVal / 149597870691;
        public static double Mile_2_Meter(double inVal)         => inVal * 1609.344;
        public static double Meter_2_Mile(double inVal)         => inVal / 1609.344;
        public static double NauticUKMile_2_Meter(double inVal) => inVal * 1853.184;
        public static double Meter_2_NauticUKMile(double inVal) => inVal / 1853.184;
        public static double NauticIntMile_2_Meter(double inVal)    => inVal * 1852;
        public static double Meter_2_NauticIntMile(double inVal)    => inVal / 1852;
        public static double Yard_2_Meter(double inVal)         => inVal * 0.9144;
        public static double Meter_2_Yard(double inVal)         => inVal / 0.9144;
        public static double Food_2_Meter(double inVal)         => inVal * 0.3048;
        public static double Meter_2_Food(double inVal)         => inVal / 0.3048;
        public static double Inch_2_Meter(double inVal)         => inVal * 0.0254;
        public static double Meter_2_Inch(double inVal)         => inVal / 0.0254;
        public static double Kilometer_2_Meter(double inVal)    => inVal * 1000;
        public static double Meter_2_Kilometer(double inVal)    => inVal / 1000;
        public static double Decimeter_2_Meter(double inVal)    => inVal * 0.1;
        public static double Meter_2_Decimeter(double inVal)    => inVal / 0.1;
        public static double Centimeter_2_Meter(double inVal)   => inVal * 0.01;
        public static double Meter_2_Centimeter(double inVal)   => inVal / 0.01;
        public static double Millimeter_2_Meter(double inVal)   => inVal * 0.001;
        public static double Meter_2_Millimeter(double inVal)   => inVal / 0.001;
        public static double Micrometer_2_Meter(double inVal)   => inVal * 1.0E-6;
        public static double Meter_2_Micrometer(double inVal)   => inVal / 1.0E-6;
        public static double Nanometer_2_Meter(double inVal)   => inVal * 1.0E-9;
        public static double Meter_2_Nanometer(double inVal)   => inVal / 1.0E-9;
        public static double EarthEquatorialRadius_2_Meter(double inVal)    => inVal * 6378160;
        public static double Meter_2_EarthEquatorialRadius(double inVal)    => inVal / 6378160;
        public static double EarthPolarRadius_2_Meter(double inVal)         => inVal * 6356776.9999999;
        public static double Meter_2_EarthPolarRadius(double inVal)         => inVal / 6356776.9999999;
        public static double EarthDistanceFromSun_2_Meter(double inVal)     => inVal * 149600000000;
        public static double Meter_2_EarthDistanceFromSun(double inVal)     => inVal / 149600000000;
        public static double SunRadius_2_Meter(double inVal)        => inVal * 696000000;
        public static double Meter_2_SunRadius(double inVal)        => inVal / 696000000;
        public static double Exameter_2_Meter(double inVal)                             => inVal * 1E+19;		 // [Em] -> m
        public static double Meter_2_Exameter(double inVal)                             => inVal / 1E+19;		 // m -> [Em]
        public static double Petameter_2_Meter(double inVal)                            => inVal * 10000000000000000;		 // [Pm] -> m
        public static double Meter_2_Petameter(double inVal)                            => inVal / 10000000000000000;		 // m -> [Pm]
        public static double Terameter_2_Meter(double inVal)                            => inVal * 1000000000000;		 // [Tm] -> m
        public static double Meter_2_Terameter(double inVal)                            => inVal / 1000000000000;		 // m -> [Tm]
        public static double Gigameter_2_Meter(double inVal)                            => inVal * 1000000000;		 // [Gm] -> m
        public static double Meter_2_Gigameter(double inVal)                            => inVal / 1000000000;		 // m -> [Gm]
        public static double Megameter_2_Meter(double inVal)                            => inVal * 1000000;		 // [Mm] -> m
        public static double Meter_2_Megameter(double inVal)                            => inVal / 1000000;		 // m -> [Mm]
        public static double Hectometer_2_Meter(double inVal)                           => inVal * 100;		 // [hm] -> m
        public static double Meter_2_Hectometer(double inVal)                           => inVal / 100;		 // m -> [hm]
        public static double Dekameter_2_Meter(double inVal)                            => inVal * 10;		 // [dam] -> m
        public static double Meter_2_Dekameter(double inVal)                            => inVal / 10;		 // m -> [dam]
        public static double Micron_2_Meter(double inVal)                               => inVal * 1E-05;		 // [µ] -> m
        public static double Meter_2_Micron(double inVal)                               => inVal / 1E-05;		 // m -> [µ]
        public static double Picometer_2_Meter(double inVal)                            => inVal * 1E-11;		 // [pm] -> m
        public static double Meter_2_Picometer(double inVal)                            => inVal / 1E-11;		 // m -> [pm]
        public static double Femtometer_2_Meter(double inVal)                           => inVal * 1E-14;		 // [fm] -> m
        public static double Meter_2_Femtometer(double inVal)                           => inVal / 1E-14;		 // m -> [fm]
        public static double Attometer_2_Meter(double inVal)                            => inVal * 1E-17;		 // [am] -> m
        public static double Meter_2_Attometer(double inVal)                            => inVal / 1E-17;		 // m -> [am]
        public static double League_2_Meter(double inVal)                               => inVal * 4828032;		 // [lea] -> m
        public static double Meter_2_League(double inVal)                               => inVal / 4828032;		 // m -> [lea]
        public static double NauticalLeagueUK_2_Meter(double inVal)                     => inVal * 5559552;		 // NauticalLeagueUK -> m
        public static double Meter_2_NauticalLeagueUK(double inVal)                     => inVal / 5559552;		 // m -> NauticalLeagueUK
        public static double NauticalLeagueInt_2_Meter(double inVal)                    => inVal * 5556;		 // NauticalLeagueInt. -> m
        public static double Meter_2_NauticalLeagueInt(double inVal)                    => inVal / 5556;		 // m -> NauticalLeagueInt.
        public static double LeagueStatute_2_Meter(double inVal)                        => inVal * 48280416560833;		 // [st.league] -> m
        public static double Meter_2_LeagueStatute(double inVal)                        => inVal / 48280416560833;		 // m -> [st.league]
        public static double MileStatute_2_Meter(double inVal)                          => inVal * 16093472186944;		 // [mi, mi (US)] -> m
        public static double Meter_2_MileStatute(double inVal)                          => inVal / 16093472186944;		 // m -> [mi, mi (US)]
        public static double MileUSSurvey_2_Meter(double inVal)                         => inVal * 16093472186944;		 // [mi] -> m
        public static double Meter_2_MileUSSurvey(double inVal)                         => inVal / 16093472186944;		 // m -> [mi]
        public static double MileRoman_2_Meter(double inVal)                            => inVal * 1479804;		 // MileRoman -> m
        public static double Meter_2_MileRoman(double inVal)                            => inVal / 1479804;		 // m -> MileRoman
        public static double Kiloyard_2_Meter(double inVal)                             => inVal * 9144;		 // [kyd] -> m
        public static double Meter_2_Kiloyard(double inVal)                             => inVal / 9144;		 // m -> [kyd]
        public static double Furlong_2_Meter(double inVal)                              => inVal * 201168;		 // [fur] -> m
        public static double Meter_2_Furlong(double inVal)                              => inVal / 201168;		 // m -> [fur]
        public static double FurlongUSSurvey_2_Meter(double inVal)                      => inVal * 2011684023368;		 // [fur] -> m
        public static double Meter_2_FurlongUSSurvey(double inVal)                      => inVal / 2011684023368;		 // m -> [fur]
        public static double Chain_2_Meter(double inVal)                                => inVal * 201168;		 // [ch] -> m
        public static double Meter_2_Chain(double inVal)                                => inVal / 201168;		 // m -> [ch]
        public static double ChainUSSurvey_2_Meter(double inVal)                        => inVal * 201168402337;		 // [ch] -> m
        public static double Meter_2_ChainUSSurvey(double inVal)                        => inVal / 201168402337;		 // m -> [ch]
        public static double Rope_2_Meter(double inVal)                                 => inVal * 6096;		 // Rope -> m
        public static double Meter_2_Rope(double inVal)                                 => inVal / 6096;		 // m -> Rope
        public static double Rod_2_Meter(double inVal)                                  => inVal * 50292;		 // [rd] -> m
        public static double Meter_2_Rod(double inVal)                                  => inVal / 50292;		 // m -> [rd]
        public static double RodUSSurvey_2_Meter(double inVal)                          => inVal * 50292100584;		 // [rd] -> m
        public static double Meter_2_RodUSSurvey(double inVal)                          => inVal / 50292100584;		 // m -> [rd]
        public static double Perch_2_Meter(double inVal)                                => inVal * 50292;		 // Perch -> m
        public static double Meter_2_Perch(double inVal)                                => inVal / 50292;		 // m -> Perch
        public static double Pole_2_Meter(double inVal)                                 => inVal * 50292;		 // Pole -> m
        public static double Meter_2_Pole(double inVal)                                 => inVal / 50292;		 // m -> Pole
        public static double Fathom_2_Meter(double inVal)                               => inVal * 18288;		 // [fath] -> m
        public static double Meter_2_Fathom(double inVal)                               => inVal / 18288;		 // m -> [fath]
        public static double FathomUSSurvey_2_Meter(double inVal)                       => inVal * 18288036576;		 // [fath] -> m
        public static double Meter_2_FathomUSSurvey(double inVal)                       => inVal / 18288036576;		 // m -> [fath]
        public static double Ell_2_Meter(double inVal)                                  => inVal * 1143;		 // Ell -> m
        public static double Meter_2_Ell(double inVal)                                  => inVal / 1143;		 // m -> Ell
        public static double FootUSSurvey_2_Meter(double inVal)                         => inVal * 3048006096;		 // [ft] -> m
        public static double Meter_2_FootUSSurvey(double inVal)                         => inVal / 3048006096;		 // m -> [ft]
        public static double Link_2_Meter(double inVal)                                 => inVal * 201168;		 // [li] -> m
        public static double Meter_2_Link(double inVal)                                 => inVal / 201168;		 // m -> [li]
        public static double LinkUSSurvey_2_Meter(double inVal)                         => inVal * 2011684023;		 // [li] -> m
        public static double Meter_2_LinkUSSurvey(double inVal)                         => inVal / 2011684023;		 // m -> [li]
        public static double CubitUK_2_Meter(double inVal)                              => inVal * 4572;		 // CubitUK -> m
        public static double Meter_2_CubitUK(double inVal)                              => inVal / 4572;		 // m -> CubitUK
        public static double Hand_2_Meter(double inVal)                                 => inVal * 1016;		 // Hand -> m
        public static double Meter_2_Hand(double inVal)                                 => inVal / 1016;		 // m -> Hand
        public static double SpanCloth_2_Meter(double inVal)                            => inVal * 2286;		 // SpanCloth -> m
        public static double Meter_2_SpanCloth(double inVal)                            => inVal / 2286;		 // m -> SpanCloth
        public static double FingerCloth_2_Meter(double inVal)                          => inVal * 1143;		 // FingerCloth -> m
        public static double Meter_2_FingerCloth(double inVal)                          => inVal / 1143;		 // m -> FingerCloth
        public static double NailCloth_2_Meter(double inVal)                            => inVal * 5715;		 // NailCloth -> m
        public static double Meter_2_NailCloth(double inVal)                            => inVal / 5715;		 // m -> NailCloth
        public static double InchUSSurvey_2_Meter(double inVal)                         => inVal * 254000508;		 // [in] -> m
        public static double Meter_2_InchUSSurvey(double inVal)                         => inVal / 254000508;		 // m -> [in]
        public static double Barleycorn_2_Meter(double inVal)                           => inVal * 84666667;		 // Barleycorn -> m
        public static double Meter_2_Barleycorn(double inVal)                           => inVal / 84666667;		 // m -> Barleycorn
        public static double Mil_2_Meter(double inVal)                                  => inVal * 0.00254;		 // [mil, thou] -> m
        public static double Meter_2_Mil(double inVal)                                  => inVal / 0.00254;		 // m -> [mil, thou]
        public static double Microinch_2_Meter(double inVal)                            => inVal * 2.54E-06;		 // Microinch -> m
        public static double Meter_2_Microinch(double inVal)                            => inVal / 2.54E-06;		 // m -> Microinch
        public static double Angstrom_2_Meter(double inVal)                             => inVal * 1E-09;		 // [A] -> m
        public static double Meter_2_Angstrom(double inVal)                             => inVal / 1E-09;		 // m -> [A]
//        public static double A.u.OfLength_2_Meter(double inVal)                         => inVal * 529.17724900001;		 // [a.u., b] -> m
//        public static double Meter_2_A.u.OfLength(double inVal)                         => inVal / 529.17724900001;		 // m -> [a.u., b]
        public static double XUnit_2_Meter(double inVal)                               => inVal * 1.00208E-08;		 // [X] -> m
        public static double Meter_2_XUnit(double inVal)                               => inVal / 1.00208E-08;		 // m -> [X]
        public static double Fermi_2_Meter(double inVal)                                => inVal * 1E-14;		 // [F, f] -> m
        public static double Meter_2_Fermi(double inVal)                                => inVal / 1E-14;		 // m -> [F, f]
        public static double Arpent_2_Meter(double inVal)                               => inVal * 585216;		 // Arpent -> m
        public static double Meter_2_Arpent(double inVal)                               => inVal / 585216;		 // m -> Arpent
        public static double Pica_2_Meter(double inVal)                                 => inVal * 42333333;		 // Pica -> m
        public static double Meter_2_Pica(double inVal)                                 => inVal / 42333333;		 // m -> Pica
        public static double Point_2_Meter(double inVal)                                => inVal * 3527778;		 // Point -> m
        public static double Meter_2_Point(double inVal)                                => inVal / 3527778;		 // m -> Point
        public static double Twip_2_Meter(double inVal)                                 => inVal * 1.76389;		 // Twip -> m
        public static double Meter_2_Twip(double inVal)                                 => inVal / 1.76389;		 // m -> Twip
        public static double Aln_2_Meter(double inVal)                                  => inVal * 5937777778;		 // Aln -> m
        public static double Meter_2_Aln(double inVal)                                  => inVal / 5937777778;		 // m -> Aln
        public static double Famn_2_Meter(double inVal)                                 => inVal * 17813333333;		 // Famn -> m
        public static double Meter_2_Famn(double inVal)                                 => inVal / 17813333333;		 // m -> Famn
        public static double Caliber_2_Meter(double inVal)                              => inVal * 254;		 // [cl] -> m
        public static double Meter_2_Caliber(double inVal)                              => inVal / 254;		 // m -> [cl]
        public static double Centiinch_2_Meter(double inVal)                            => inVal * 254;		 // [cin] -> m
        public static double Meter_2_Centiinch(double inVal)                            => inVal / 254;		 // m -> [cin]
        public static double Ken_2_Meter(double inVal)                                  => inVal * 211836;		 // Ken -> m
        public static double Meter_2_Ken(double inVal)                                  => inVal / 211836;		 // m -> Ken
        public static double RussianArchin_2_Meter(double inVal)                        => inVal * 7112;		 // RussianArchin -> m
        public static double Meter_2_RussianArchin(double inVal)                        => inVal / 7112;		 // m -> RussianArchin
        public static double RomanActus_2_Meter(double inVal)                           => inVal * 3547872;		 // RomanActus -> m
        public static double Meter_2_RomanActus(double inVal)                           => inVal / 3547872;		 // m -> RomanActus
        public static double VaraDeTarea_2_Meter(double inVal)                          => inVal * 2505456;		 // VaraDeTarea -> m
        public static double Meter_2_VaraDeTarea(double inVal)                          => inVal / 2505456;		 // m -> VaraDeTarea
        public static double VaraConuquera_2_Meter(double inVal)                        => inVal * 2505456;		 // VaraConuquera -> m
        public static double Meter_2_VaraConuquera(double inVal)                        => inVal / 2505456;		 // m -> VaraConuquera
        public static double VaraCastellana_2_Meter(double inVal)                       => inVal * 835152;		 // VaraCastellana -> m
        public static double Meter_2_VaraCastellana(double inVal)                       => inVal / 835152;		 // m -> VaraCastellana
        public static double CubitGreek_2_Meter(double inVal)                           => inVal * 462788;		 // CubitGreek -> m
        public static double Meter_2_CubitGreek(double inVal)                           => inVal / 462788;		 // m -> CubitGreek
        public static double LongReed_2_Meter(double inVal)                             => inVal * 32004;		 // LongReed -> m
        public static double Meter_2_LongReed(double inVal)                             => inVal / 32004;		 // m -> LongReed
        public static double Reed_2_Meter(double inVal)                                 => inVal * 27432;		 // Reed -> m
        public static double Meter_2_Reed(double inVal)                                 => inVal / 27432;		 // m -> Reed
        public static double LongCubit_2_Meter(double inVal)                            => inVal * 5334;		 // LongCubit -> m
        public static double Meter_2_LongCubit(double inVal)                            => inVal / 5334;		 // m -> LongCubit
        public static double Handbreadth_2_Meter(double inVal)                          => inVal * 762;		 // Handbreadth -> m
        public static double Meter_2_Handbreadth(double inVal)                          => inVal / 762;		 // m -> Handbreadth
        public static double Fingerbreadth_2_Meter(double inVal)                        => inVal * 1905;		 // Fingerbreadth -> m
        public static double Meter_2_Fingerbreadth(double inVal)                        => inVal / 1905;		 // m -> Fingerbreadth
        public static double PlanckLength_2_Meter(double inVal)                         => inVal * 1.61605E-30;		 // PlanckLength -> m
        public static double Meter_2_PlanckLength(double inVal)                         => inVal / 1.61605E-30;		 // m -> PlanckLength
        public static double ElectronRadiusClassical_2_Meter(double inVal)              => inVal * 2.81794092E-07;		 // ElectronRadiusClassical -> m
        public static double Meter_2_ElectronRadiusClassical(double inVal)              => inVal / 2.81794092E-07;		 // m -> ElectronRadiusClassical
        public static double BohrRadius_2_Meter(double inVal)                           => inVal * 529.17724900001;		 // [b, a.u.] -> m
        public static double Meter_2_BohrRadius(double inVal)                           => inVal / 529.17724900001;		 // m -> [b, a.u.]
        #endregion

        #region temperature
        public static double Celsius_2_Kelvin(double inVal)     => inVal+273.15;
        public static double Kelvin_2_Celsius(double inVal)     => inVal-273.15;
        public static double Celsius_2_Fahrenheit(double inVal) => inVal*(9/5)+32;
        public static double Fahrenheit_2_Celsius(double inVal) => (inVal-32)*5/9;
        public static double Kelvin_2_Fahrenheit(double inVal)  => (inVal-273.15)*(9/5)+32;
        public static double Fahrenheit_2_Kelvin(double inVal)  => (inVal-32)*(5/9)+273.15;
        public static double Rankine_2_Fahrenheit(double inVal) => inVal+459.67;
        public static double Fahrenheit_2_Rankine(double inVal) => inVal-459.67;
        #endregion

        #region weight
        public static double Gram_2_Kilogram(double inVal)      => inVal * 0.001;
        public static double Kilogram_2_Gram(double inVal)      => inVal / 0.001;
        public static double Gram_2_Milligram(double inVal)     => inVal * 1000;
        public static double Milligram_2_Gram(double inVal)     => inVal / 1000;
        public static double Milligram_2_Kilogram(double inVal) => inVal * 1.0E-6;
        public static double Kilogram_2_Milligram(double inVal) => inVal / 1.0E-6;
        public static double Ton_2_Kilogram(double inVal)       => inVal * 1000;
        public static double Kilogram_2_Ton(double inVal)       => inVal / 1000;
        public static double TonShortUS_2_Kilogram(double inVal)    => inVal * 907.18474;
        public static double Kilogram_2_TonShortUs(double inVal)    => inVal / 907.18474;
        public static double TonLongUK_2_Kilogram(double inVal) => inVal * 1016.0469088;
        public static double Kilogram_2_TonLongUK(double inVal) => inVal / 1016.0469088;
        public static double Pound_2_Kilogram(double inVal)     => inVal * 0.45359237;
        public static double Kilogram_2_Pound(double inVal)     => inVal / 0.45359237;
        public static double Ounce_2_Kilogram(double inVal)     => inVal * 0.0283495231;
        public static double Kilogram_2_Ounce(double inVal)     => inVal / 0.0283495231;
        public static double Carat_2_Kilogram(double inVal)     => inVal * 0.0002;
        public static double Kilogram_2_Carat(double inVal)     => inVal / 0.0002;
        public static double TalentHebrew_2_Kilogram(double inVal)  => inVal * 34.2;
        public static double Kilogram_2_TalentHebrew(double inVal)  => inVal / 34.2;
        public static double MinaHebrew_2_Kilogram(double inVal)    => inVal * 0.57;
        public static double Kilogram_2_MinaHebrew(double inVal)    => inVal / 0.57;
        public static double ShekelHebrew_2_Kilogram(double inVal)  => inVal * 0.0114;
        public static double Kilogram_2_ShekelHebrew(double inVal)  => inVal / 0.0114;
        public static double BenanHebrew_2_Kilogram(double inVal)   => inVal * 0.0057;
        public static double Kilogram_2_BenanHebrew(double inVal)   => inVal / 0.0057;
        public static double GerahHebrew_2_Kilogram(double inVal)   => inVal * 0.00057;
        public static double Kilogram_2_GerahHebrew(double inVal)   => inVal / 0.00057;
        public static double TalentGreek_2_Kilogram(double inVal)   => inVal * 20.4;
        public static double Kilogram_2_TalentGreek(double inVal)   => inVal / 20.4;
        public static double MinaGreek_2_Kilogram(double inVal)     => inVal * 0.34;
        public static double Kilogram_2_MinaGreek(double inVal)     => inVal / 0.34;
        public static double TetraDrachmaGreek_2_Kilogram(double inVal) => inVal * 0.0136;
        public static double Kilogram_2_TetraDrachmaGreek(double inVal) => inVal / 0.0136;
        public static double DiDrachmaGreek_2_Kilogram(double inVal)    => inVal * 0.0068;
        public static double Kilogram_2_DiDrachmaGreek(double inVal)    => inVal / 0.0068;
        public static double DrachmaGreek_2_Kilogram(double inVal)  => inVal * 0.0034;
        public static double Kilogram_2_DrachmaGreek(double inVal)  => inVal / 0.0034;
        public static double DenariusRoman_2_Kilogram(double inVal) => inVal * 0.00385;
        public static double Kilogram_2_DenariusRoman(double inVal) => inVal / 0.00385;
        public static double AssarionRoman_2_Kilogram(double inVal) => inVal * 0.000240625;
        public static double Kilogram_2_AssarionRoman(double inVal) => inVal / 0.000240625;
        public static double QuadransRoman_2_Kilogram(double inVal) => inVal * 6.01563E-5;
        public static double Kilogram_2_QuadransRoman(double inVal) => inVal / 6.01563E-5;
        public static double LeptonRoman_2_Kilogram(double inVal)   => inVal * 3.00781E-5;
        public static double Kilogram_2_LeptonRoman(double inVal)   => inVal / 3.00781E-5;
        public static double AtomicMass_2_Kilogram(double inVal)    => inVal * 1.6605402E-27;
        public static double Kilogram_2_AtomicMass(double inVal)    => inVal / 1.6605402E-27;
        public static double PlanckMass_2_Kilogram(double inVal)    => inVal * 2.17671E-8;
        public static double Kilogram_2_PlanckMass(double inVal)    => inVal / 2.17671E-8;
        public static double ElectronMass_2_Kilogram(double inVal)  => inVal * 9.1093897E-31;
        public static double Kilogram_2_ElectronMass(double inVal)  => inVal / 9.1093897E-31;
        public static double MuonMass_2_Kilogram(double inVal)      => inVal * 1.8835327E-28;
        public static double Kilogram_2_MuonMass(double inVal)      => inVal / 1.8835327E-28;
        public static double ProtonMass_2_Kilogram(double inVal)    => inVal * 1.6726231E-27;
        public static double Kilogram_2_ProtonMass(double inVal)    => inVal / 1.6726231E-27;
        public static double NeutronMass_2_Kilogram(double inVal)   => inVal * 1.6749286E-27;
        public static double Kilogram_2_NeutronMass(double inVal)   => inVal / 1.6749286E-27;
        public static double DeutoronMass_2_Kilogram(double inVal)  => inVal * 3.343586E-27;
        public static double Kilogram_2_DeutoronMass(double inVal)  => inVal / 3.343586E-27;
        public static double EarthMass_2_Kilogram(double inVal)     => inVal * 5.9760000000002E+24;
        public static double Kilogram_2_EarthMass(double inVal)     => inVal / 5.9760000000002E+24;
        public static double SunMass_2_Kilogram(double inVal)       => inVal * 2.0E+30;
        public static double Kilogram_2_SunMass(double inVal)       => inVal / 2.0E+30;
        public static double Exagram_2_Kilogram(double inVal)                           => inVal * 10000000000000000;		 // [Eg] -> kg
        public static double Kilogram_2_Exagram(double inVal)                           => inVal / 10000000000000000;		 // kg -> [Eg]
        public static double Petagram_2_Kilogram(double inVal)                          => inVal * 1000000000000;		 // [Pg] -> kg
        public static double Kilogram_2_Petagram(double inVal)                          => inVal / 1000000000000;		 // kg -> [Pg]
        public static double Teragram_2_Kilogram(double inVal)                          => inVal * 1000000000;		 // [Tg] -> kg
        public static double Kilogram_2_Teragram(double inVal)                          => inVal / 1000000000;		 // kg -> [Tg]
        public static double Gigagram_2_Kilogram(double inVal)                          => inVal * 1000000;		 // [Gg] -> kg
        public static double Kilogram_2_Gigagram(double inVal)                          => inVal / 1000000;		 // kg -> [Gg]
        public static double Megagram_2_Kilogram(double inVal)                          => inVal * 1000;		 // [Mg] -> kg
        public static double Kilogram_2_Megagram(double inVal)                          => inVal / 1000;		 // kg -> [Mg]
        public static double Hectogram_2_Kilogram(double inVal)                         => inVal * 1;		 // [hg] -> kg
        public static double Kilogram_2_Hectogram(double inVal)                         => inVal / 1;		 // kg -> [hg]
        public static double Dekagram_2_Kilogram(double inVal)                          => inVal * 1;		 // [dag] -> kg
        public static double Kilogram_2_Dekagram(double inVal)                          => inVal / 1;		 // kg -> [dag]
        public static double Decigram_2_Kilogram(double inVal)                          => inVal * 1;		 // [dg] -> kg
        public static double Kilogram_2_Decigram(double inVal)                          => inVal / 1;		 // kg -> [dg]
        public static double Centigram_2_Kilogram(double inVal)                         => inVal * 0.0001;		 // [cg] -> kg
        public static double Kilogram_2_Centigram(double inVal)                         => inVal / 0.0001;		 // kg -> [cg]
        public static double Microgram_2_Kilogram(double inVal)                         => inVal * 1E-08;		 // [µg] -> kg
        public static double Kilogram_2_Microgram(double inVal)                         => inVal / 1E-08;		 // kg -> [µg]
        public static double Nanogram_2_Kilogram(double inVal)                          => inVal * 1E-11;		 // [ng] -> kg
        public static double Kilogram_2_Nanogram(double inVal)                          => inVal / 1E-11;		 // kg -> [ng]
        public static double Picogram_2_Kilogram(double inVal)                          => inVal * 1E-14;		 // [pg] -> kg
        public static double Kilogram_2_Picogram(double inVal)                          => inVal / 1E-14;		 // kg -> [pg]
        public static double Femtogram_2_Kilogram(double inVal)                         => inVal * 1E-17;		 // [fg] -> kg
        public static double Kilogram_2_Femtogram(double inVal)                         => inVal / 1E-17;		 // kg -> [fg]
        public static double Attogram_2_Kilogram(double inVal)                          => inVal * 1E-20;		 // [ag] -> kg
        public static double Kilogram_2_Attogram(double inVal)                          => inVal / 1E-20;		 // kg -> [ag]
        public static double Dalton_2_Kilogram(double inVal)                            => inVal * 1.6605300000013E-14;		 // Dalton -> kg
        public static double Kilogram_2_Dalton(double inVal)                            => inVal / 1.6605300000013E-14;		 // kg -> Dalton
        public static double KilogramForceSquareSecondMeter_2_Kilogram(double inVal)    => inVal * 980665;		 // Kilogram-forceSquareSecond/meter -> kg
        public static double Kilogram_2_KilogramForceSquareSecondMeter(double inVal)    => inVal / 980665;		 // kg -> Kilogram-forceSquareSecond/meter
        public static double Kilopound_2_Kilogram(double inVal)                         => inVal * 45359237;		 // [kip] -> kg
        public static double Kilogram_2_Kilopound(double inVal)                         => inVal / 45359237;		 // kg -> [kip]
        public static double Kip_2_Kilogram(double inVal)                               => inVal * 45359237;		 // Kip -> kg
        public static double Kilogram_2_Kip(double inVal)                               => inVal / 45359237;		 // kg -> Kip
        public static double Slug_2_Kilogram(double inVal)                              => inVal * 145939029372;		 // Slug -> kg
        public static double Kilogram_2_Slug(double inVal)                              => inVal / 145939029372;		 // kg -> Slug
        public static double PoundForceSquareSecondFoot_2_Kilogram(double inVal)        => inVal * 145939029372;		 // Pound-forceSquareSecond/foot -> kg
        public static double Kilogram_2_PoundForceSquareSecondFoot(double inVal)        => inVal / 145939029372;		 // kg -> Pound-forceSquareSecond/foot
        public static double PoundTroyOrApothecary_2_Kilogram(double inVal)             => inVal * 3732417216;		 // PoundTroyOrApothecary -> kg
        public static double Kilogram_2_PoundTroyOrApothecary(double inVal)             => inVal / 3732417216;		 // kg -> PoundTroyOrApothecary
        public static double Poundal_2_Kilogram(double inVal)                           => inVal * 140867196;		 // [pdl] -> kg
        public static double Kilogram_2_Poundal(double inVal)                           => inVal / 140867196;		 // kg -> [pdl]
        public static double TonAssayUS_2_Kilogram(double inVal)                        => inVal * 2916667;		 // [AT (US)] -> kg
        public static double Kilogram_2_TonAssayUS(double inVal)                        => inVal / 2916667;		 // kg -> [AT (US)]
        public static double TonAssayUK_2_Kilogram(double inVal)                        => inVal * 326666667;		 // [AT (UK)] -> kg
        public static double Kilogram_2_TonAssayUK(double inVal)                        => inVal / 326666667;		 // kg -> [AT (UK)]
        public static double KilotonMetric_2_Kilogram(double inVal)                     => inVal * 1000000;		 // [kt] -> kg
        public static double Kilogram_2_KilotonMetric(double inVal)                     => inVal / 1000000;		 // kg -> [kt]
        public static double QuintalMetric_2_Kilogram(double inVal)                     => inVal * 100;		 // [cwt] -> kg
        public static double Kilogram_2_QuintalMetric(double inVal)                     => inVal / 100;		 // kg -> [cwt]
        public static double HundredweightUS_2_Kilogram(double inVal)                   => inVal * 45359237;		 // HundredweightUS -> kg
        public static double Kilogram_2_HundredweightUS(double inVal)                   => inVal / 45359237;		 // kg -> HundredweightUS
        public static double HundredweightUK_2_Kilogram(double inVal)                   => inVal * 5080234544;		 // HundredweightUK -> kg
        public static double Kilogram_2_HundredweightUK(double inVal)                   => inVal / 5080234544;		 // kg -> HundredweightUK
        public static double QuarterUS_2_Kilogram(double inVal)                         => inVal * 1133980925;		 // [qr (US)] -> kg
        public static double Kilogram_2_QuarterUS(double inVal)                         => inVal / 1133980925;		 // kg -> [qr (US)]
        public static double QuarterUK_2_Kilogram(double inVal)                         => inVal * 1270058636;		 // [qr (UK)] -> kg
        public static double Kilogram_2_QuarterUK(double inVal)                         => inVal / 1270058636;		 // kg -> [qr (UK)]
        public static double StoneUS_2_Kilogram(double inVal)                           => inVal * 5669904625;		 // StoneUS -> kg
        public static double Kilogram_2_StoneUS(double inVal)                           => inVal / 5669904625;		 // kg -> StoneUS
        public static double StoneUK_2_Kilogram(double inVal)                           => inVal * 635029318;		 // StoneUK -> kg
        public static double Kilogram_2_StoneUK(double inVal)                           => inVal / 635029318;		 // kg -> StoneUK
        public static double Tonne_2_Kilogram(double inVal)                             => inVal * 1000;		 // [t] -> kg
        public static double Kilogram_2_Tonne(double inVal)                             => inVal / 1000;		 // kg -> [t]
        public static double Pennyweight_2_Kilogram(double inVal)                       => inVal * 15551738;		 // [pwt] -> kg
        public static double Kilogram_2_Pennyweight(double inVal)                       => inVal / 15551738;		 // kg -> [pwt]
        public static double ScrupleApothecary_2_Kilogram(double inVal)                 => inVal * 12959782;		 // [s.ap] -> kg
        public static double Kilogram_2_ScrupleApothecary(double inVal)                 => inVal / 12959782;		 // kg -> [s.ap]
        public static double Grain_2_Kilogram(double inVal)                             => inVal * 6.47989;		 // [gr] -> kg
        public static double Kilogram_2_Grain(double inVal)                             => inVal / 6.47989;		 // kg -> [gr]
        public static double Gamma_2_Kilogram(double inVal)                             => inVal * 1E-08;		 // Gamma -> kg
        public static double Kilogram_2_Gamma(double inVal)                             => inVal / 1E-08;		 // kg -> Gamma
        #endregion

        #region time
        public static double Millisecond_2_Second(double inVal)                         => inVal * 1;		 // [ms] -> s
        public static double Second_2_Millisecond(double inVal)                         => inVal / 1;		 // s -> [ms]
        public static double Minute_2_Second(double inVal)                              => inVal * 60;		 // [min] -> s
        public static double Second_2_Minute(double inVal)                              => inVal / 60;		 // s -> [min]
        public static double Hour_2_Second(double inVal)                                => inVal * 3600;		 // [h] -> s
        public static double Second_2_Hour(double inVal)                                => inVal / 3600;		 // s -> [h]
        public static double Day_2_Second(double inVal)                                 => inVal * 86400;		 // [d] -> s
        public static double Second_2_Day(double inVal)                                 => inVal / 86400;		 // s -> [d]
        public static double Week_2_Second(double inVal)                                => inVal * 604800;		 // Week -> s
        public static double Second_2_Week(double inVal)                                => inVal / 604800;		 // s -> Week
        public static double Month_2_Second(double inVal)                               => inVal * 2628000;		 // Month -> s
        public static double Second_2_Month(double inVal)                               => inVal / 2628000;		 // s -> Month
        public static double Year_2_Second(double inVal)                                => inVal * 31536000;		 // [y] -> s
        public static double Second_2_Year(double inVal)                                => inVal / 31536000;		 // s -> [y]
        public static double Decade_2_Second(double inVal)                              => inVal * 315360000;		 // Decade -> s
        public static double Second_2_Decade(double inVal)                              => inVal / 315360000;		 // s -> Decade
        public static double Century_2_Second(double inVal)                             => inVal * 3153600000;		 // Century -> s
        public static double Second_2_Century(double inVal)                             => inVal / 3153600000;		 // s -> Century
        public static double Millennium_2_Second(double inVal)                          => inVal * 31536000000;		 // Millennium -> s
        public static double Second_2_Millennium(double inVal)                          => inVal / 31536000000;		 // s -> Millennium
        public static double Microsecond_2_Second(double inVal)                         => inVal * 1E-05;		 // [µs] -> s
        public static double Second_2_Microsecond(double inVal)                         => inVal / 1E-05;		 // s -> [µs]
        public static double Nanosecond_2_Second(double inVal)                          => inVal * 1E-08;		 // [ns] -> s
        public static double Second_2_Nanosecond(double inVal)                          => inVal / 1E-08;		 // s -> [ns]
        public static double Picosecond_2_Second(double inVal)                          => inVal * 1E-11;		 // [ps] -> s
        public static double Second_2_Picosecond(double inVal)                          => inVal / 1E-11;		 // s -> [ps]
        public static double Femtosecond_2_Second(double inVal)                         => inVal * 1E-14;		 // [fs] -> s
        public static double Second_2_Femtosecond(double inVal)                         => inVal / 1E-14;		 // s -> [fs]
        public static double Attosecond_2_Second(double inVal)                          => inVal * 1E-17;		 // [as] -> s
        public static double Second_2_Attosecond(double inVal)                          => inVal / 1E-17;		 // s -> [as]
        public static double Shake_2_Second(double inVal)                               => inVal * 1E-07;		 // Shake -> s
        public static double Second_2_Shake(double inVal)                               => inVal / 1E-07;		 // s -> Shake
        public static double MonthSynodic_2_Second(double inVal)                        => inVal * 255144384;		 // MonthSynodic -> s
        public static double Second_2_MonthSynodic(double inVal)                        => inVal / 255144384;		 // s -> MonthSynodic
        public static double YearJulian_2_Second(double inVal)                          => inVal * 31557600;		 // YearJulian -> s
        public static double Second_2_YearJulian(double inVal)                          => inVal / 31557600;		 // s -> YearJulian
        public static double YearLeap_2_Second(double inVal)                            => inVal * 31622400;		 // YearLeap -> s
        public static double Second_2_YearLeap(double inVal)                            => inVal / 31622400;		 // s -> YearLeap
        public static double YearTropical_2_Second(double inVal)                        => inVal * 31556930;		 // YearTropical -> s
        public static double Second_2_YearTropical(double inVal)                        => inVal / 31556930;		 // s -> YearTropical
        public static double YearSidereal_2_Second(double inVal)                        => inVal * 3155814954;		 // YearSidereal -> s
        public static double Second_2_YearSidereal(double inVal)                        => inVal / 3155814954;		 // s -> YearSidereal
        public static double DaySidereal_2_Second(double inVal)                         => inVal * 8616409;		 // DaySidereal -> s
        public static double Second_2_DaySidereal(double inVal)                         => inVal / 8616409;		 // s -> DaySidereal
        public static double HourSidereal_2_Second(double inVal)                        => inVal * 35901704166667;		 // HourSidereal -> s
        public static double Second_2_HourSidereal(double inVal)                        => inVal / 35901704166667;		 // s -> HourSidereal
        public static double MinuteSidereal_2_Second(double inVal)                      => inVal * 598361736111;		 // MinuteSidereal -> s
        public static double Second_2_MinuteSidereal(double inVal)                      => inVal / 598361736111;		 // s -> MinuteSidereal
        public static double SecondSidereal_2_Second(double inVal)                      => inVal * 9972695602;		 // SecondSidereal -> s
        public static double Second_2_SecondSidereal(double inVal)                      => inVal / 9972695602;		 // s -> SecondSidereal
        public static double Fortnight_2_Second(double inVal)                           => inVal * 1209600;		 // Fortnight -> s
        public static double Second_2_Fortnight(double inVal)                           => inVal / 1209600;		 // s -> Fortnight
        public static double Septennial_2_Second(double inVal)                          => inVal * 220752000;		 // Septennial -> s
        public static double Second_2_Septennial(double inVal)                          => inVal / 220752000;		 // s -> Septennial
        public static double Octennial_2_Second(double inVal)                           => inVal * 252288000;		 // Octennial -> s
        public static double Second_2_Octennial(double inVal)                           => inVal / 252288000;		 // s -> Octennial
        public static double Novennial_2_Second(double inVal)                           => inVal * 283824000;		 // Novennial -> s
        public static double Second_2_Novennial(double inVal)                           => inVal / 283824000;		 // s -> Novennial
        public static double Quindecennial_2_Second(double inVal)                       => inVal * 473040000;		 // Quindecennial -> s
        public static double Second_2_Quindecennial(double inVal)                       => inVal / 473040000;		 // s -> Quindecennial
        public static double Quinquennial_2_Second(double inVal)                        => inVal * 157680000;		 // Quinquennial -> s
        public static double Second_2_Quinquennial(double inVal)                        => inVal / 157680000;		 // s -> Quinquennial
        public static double PlanckTime_2_Second(double inVal)                          => inVal * 5.39056E-39;		 // PlanckTime -> s
        public static double Second_2_PlanckTime(double inVal)                          => inVal / 5.39056E-39;		 // s -> PlanckTime
        #endregion
    }
}
